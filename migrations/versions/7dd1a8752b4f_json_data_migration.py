"""Json data migration.

Revision ID: 7dd1a8752b4f
Revises: f13952b9add6
Create Date: 2020-07-22 09:27:01.902123

"""
from alembic import op
import sqlalchemy as sa
from models.Document import Document
import json
from models.db import db
from models.RoomType import RoomType
from models.Element import Element
from models.ElementType import ElementType
from models.ParameterValue import ParameterValue
from models.Paramter import Parameter, ParameterType
from models.WorkType import WorkType
from models.Work import Work
from models.Room import Room
from models.Formula import Formula, FormulaType



# revision identifiers, used by Alembic.
revision = '7dd1a8752b4f'
down_revision = 'c54ff6fc0d07'
branch_labels = None
depends_on = None


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    # op.create_index(op.f('ix_Categories_Parent_Id'), 'Categories', ['Parent_Id'], unique=False)
    # op.drop_index('IX_Category_Parent_Id', table_name='Categories')
    # op.alter_column('Documents', 'Json',
    #            existing_type=sa.NVARCHAR(),
    #            nullable=False)
    # op.alter_column('Documents', 'Name',
    #            existing_type=sa.NVARCHAR(),
    #            nullable=False)
    # op.create_index(op.f('ix_Documents_MultiProject_Id'), 'Documents', ['MultiProject_Id'], unique=False)
    # op.drop_index('IX_Document_MultiProject_Id', table_name='Documents')
    # op.create_index(op.f('ix_Formulae_ElementType_Id'), 'Formulae', ['ElementType_Id'], unique=False)
    # op.create_index(op.f('ix_Formulae_RoomType_Id'), 'Formulae', ['RoomType_Id'], unique=False)
    # op.drop_index('IX_Formula_ElementType_Id', table_name='Formulae')
    # op.drop_index('IX_Formula_RoomType_Id', table_name='Formulae')
    # op.create_index(op.f('ix_MaterialTypes_Formula_Id'), 'MaterialTypes', ['Formula_Id'], unique=False)
    # op.create_index(op.f('ix_MaterialTypes_WorkType_Id'), 'MaterialTypes', ['WorkType_Id'], unique=False)
    # op.drop_index('IX_MaterialType_Formula_Id', table_name='MaterialTypes')
    # op.drop_index('IX_MaterialType_WorkType_Id', table_name='MaterialTypes')
    # op.create_index(op.f('ix_ParameterFormulas_Formula_Id'), 'ParameterFormulas', ['Formula_Id'], unique=False)
    # op.create_index(op.f('ix_ParameterFormulas_Parameter_Id'), 'ParameterFormulas', ['Parameter_Id'], unique=False)
    # op.drop_index('IX_ParameterFormula_Formula_Id', table_name='ParameterFormulas')
    # op.drop_index('IX_ParameterFormula_Parameter_Id', table_name='ParameterFormulas')
    # op.alter_column('Rooms', 'RoomReportSalary',
    #            existing_type=sa.INTEGER(),
    #            nullable=True)
    # op.create_index(op.f('ix_TagWorkTypes_Tag_Id'), 'TagWorkTypes', ['Tag_Id'], unique=False)
    # op.create_index(op.f('ix_TagWorkTypes_WorkType_Id'), 'TagWorkTypes', ['WorkType_Id'], unique=False)
    # op.drop_index('IX_TagWorkType_Tag_Id', table_name='TagWorkTypes')
    # op.drop_index('IX_TagWorkType_WorkType_Id', table_name='TagWorkTypes')
    # op.create_index(op.f('ix_TemplateBlocks_Template_Id'), 'TemplateBlocks', ['Template_Id'], unique=False)
    # op.drop_index('IX_TemplateBlock_Template_Id', table_name='TemplateBlocks')
    # op.create_index(op.f('ix_WorkTypeCategories_Category_Id'), 'WorkTypeCategories', ['Category_Id'], unique=False)
    # op.create_index(op.f('ix_WorkTypeCategories_WorkType_Id'), 'WorkTypeCategories', ['WorkType_Id'], unique=False)
    # op.drop_index('IX_WorkTypeCategory_Category_Id', table_name='WorkTypeCategories')
    # op.drop_index('IX_WorkTypeCategory_WorkType_Id', table_name='WorkTypeCategories')
    # op.create_index(op.f('ix_WorkTypes_Formula_Id'), 'WorkTypes', ['Formula_Id'], unique=False)
    # op.drop_index('IX_WorkType_Formula_Id', table_name='WorkTypes')
    ### end Alembic commands ###

    session = db.create_scoped_session()
    res = session.query(Document).all()

    for doc in res:
        doc_json = json.loads(doc.json)
        rooms = []

        for room in doc_json['Rooms']:
            room_type = session.query(RoomType).filter(RoomType.name == room['RoomType']['Name']).first()

            if room_type is None and room['RoomType']['Name'] is not None:
                type_json = room['RoomType']
                formulas = list(map(lambda f: Formula(
                    expression=f['Expression'],
                    type=FormulaType[f['Type']],
                    parameters=list(map(lambda p: Parameter(
                        name=p['Name'],
                        type=ParameterType[p['Type']]
                    ), f['Parameter']))
                ), type_json['Formulas']))

                room_type = RoomType(
                    name=type_json['Name'],
                    formulas=formulas
                )

            elements = []
            for element in room['Elements']:
                element_type = session.query(ElementType).get(element['ElementType']['Id'])

                if element_type is None:
                    raise Exception('error')

                params = []
                for param in element['Parameters']:
                    param_type = session.query(Parameter).filter(Parameter.name == param['Parameter']['Name']).first()

                    params.append(ParameterValue(
                        parameter=param_type,
                        value=param['Value']
                    ))

                elements.append(Element(
                    count=element['Count'],
                    type=element_type,
                    parameter_values=params
                ))

            works = []

            for work in room['Works']:
                work_type = session.query(WorkType).filter(WorkType.GUID == work['WorkType']['GUID']).first()

                if work_type is None:
                    type_json = work['WorkType']
                    work_type = WorkType(
                        GUID=type_json['GUID'],
                        Name=type_json['Name'],
                        PriceValue=type_json['PriceValue'],
                        Salary=type_json['Salary'],
                        Time=type_json['Time'],
                        Order=type_json.get('Order', 0),
                        Formula=Formula(
                            expression=type_json['Formula']['Expression'],
                            type=FormulaType[type_json['Formula']['Type']],
                            parameters=list(map(lambda p: Parameter(
                                name=p['Name'],
                                type=ParameterType[p['Type']]
                            ), type_json['Formula']['Parameter']))
                        )
                    )

                params = []
                for param in work[ 'Parametrs' ]:
                    param_type = session.query(Parameter).filter(
                        Parameter.name == param[ 'Parameter' ][ 'Name' ]
                    ).first()

                    params.append(ParameterValue(
                        parameter=param_type,
                        value=param[ 'Value' ]
                    ))

                works.append(Work(
                    type=work_type,
                    is_volume_manual=work['IsVolumeManual'],
                    is_price_manual=work['IsPriceManulal'],
                    volume=work['Volume'],
                    worker=work.get('Worker', None),
                    report_salary=work.get('ReportSalary', 0),
                    report_salary_sum=work.get('ReportSalarySum', 0),
                    price_value=work['PriceValue'],
                    parameter_values=list(map(lambda p: ParameterValue(
                        value=p['Value'],
                        parameter=Parameter(
                            name=p['Parameter']['Name'],
                            type=ParameterType[p['Parameter']['Type']]
                        )
                    ), work['Parametrs']))
                ))

            params = []

            for param in room[ 'Parameters' ]:
                param_type = session.query(Parameter).filter(
                    Parameter.name == param[ 'Parameter' ][ 'Name' ]).first()

                params.append(ParameterValue(
                    parameter=param_type,
                    value=param[ 'Value' ]
                ))

            rooms.append(Room(
                room_type=room_type,
                parameter_values=params,
                elements=elements,
                works=works,
                name=room['Name'],
                factor=room['Factor'],
                salary_factor=room['SalaryFactor'],
                report_salary=room.get('RoomReportSalary', None),
                document=doc
            ))

        doc.address = doc_json['Name']
        doc.rooms = rooms
        session.commit()

    pass


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_index('IX_WorkType_Formula_Id', 'WorkTypes', ['Formula_Id'], unique=False)
    op.drop_index(op.f('ix_WorkTypes_Formula_Id'), table_name='WorkTypes')
    op.create_index('IX_WorkTypeCategory_WorkType_Id', 'WorkTypeCategories', ['WorkType_Id'], unique=False)
    op.create_index('IX_WorkTypeCategory_Category_Id', 'WorkTypeCategories', ['Category_Id'], unique=False)
    op.drop_index(op.f('ix_WorkTypeCategories_WorkType_Id'), table_name='WorkTypeCategories')
    op.drop_index(op.f('ix_WorkTypeCategories_Category_Id'), table_name='WorkTypeCategories')
    op.create_index('IX_TemplateBlock_Template_Id', 'TemplateBlocks', ['Template_Id'], unique=False)
    op.drop_index(op.f('ix_TemplateBlocks_Template_Id'), table_name='TemplateBlocks')
    op.create_index('IX_TagWorkType_WorkType_Id', 'TagWorkTypes', ['WorkType_Id'], unique=False)
    op.create_index('IX_TagWorkType_Tag_Id', 'TagWorkTypes', ['Tag_Id'], unique=False)
    op.drop_index(op.f('ix_TagWorkTypes_WorkType_Id'), table_name='TagWorkTypes')
    op.drop_index(op.f('ix_TagWorkTypes_Tag_Id'), table_name='TagWorkTypes')
    op.alter_column('Rooms', 'RoomReportSalary',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.create_index('IX_ParameterFormula_Parameter_Id', 'ParameterFormulas', ['Parameter_Id'], unique=False)
    op.create_index('IX_ParameterFormula_Formula_Id', 'ParameterFormulas', ['Formula_Id'], unique=False)
    op.drop_index(op.f('ix_ParameterFormulas_Parameter_Id'), table_name='ParameterFormulas')
    op.drop_index(op.f('ix_ParameterFormulas_Formula_Id'), table_name='ParameterFormulas')
    op.create_index('IX_MaterialType_WorkType_Id', 'MaterialTypes', ['WorkType_Id'], unique=False)
    op.create_index('IX_MaterialType_Formula_Id', 'MaterialTypes', ['Formula_Id'], unique=False)
    op.drop_index(op.f('ix_MaterialTypes_WorkType_Id'), table_name='MaterialTypes')
    op.drop_index(op.f('ix_MaterialTypes_Formula_Id'), table_name='MaterialTypes')
    op.create_index('IX_Formula_RoomType_Id', 'Formulae', ['RoomType_Id'], unique=False)
    op.create_index('IX_Formula_ElementType_Id', 'Formulae', ['ElementType_Id'], unique=False)
    op.drop_index(op.f('ix_Formulae_RoomType_Id'), table_name='Formulae')
    op.drop_index(op.f('ix_Formulae_ElementType_Id'), table_name='Formulae')
    op.create_index('IX_Document_MultiProject_Id', 'Documents', ['MultiProject_Id'], unique=False)
    op.drop_index(op.f('ix_Documents_MultiProject_Id'), table_name='Documents')
    op.alter_column('Documents', 'Name',
               existing_type=sa.NVARCHAR(),
               nullable=True)
    op.alter_column('Documents', 'Json',
               existing_type=sa.NVARCHAR(),
               nullable=True)
    op.create_index('IX_Category_Parent_Id', 'Categories', ['Parent_Id'], unique=False)
    op.drop_index(op.f('ix_Categories_Parent_Id'), table_name='Categories')
    ### end Alembic commands ###
